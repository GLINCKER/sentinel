name: CI

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

# Cancel in-progress runs for same workflow
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1
  # Speed up cargo operations
  CARGO_INCREMENTAL: 0
  CARGO_NET_RETRY: 10
  RUSTUP_MAX_RETRIES: 10

jobs:
  # Quick checks first (fail fast)
  lint:
    name: Lint & Format Check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            libwebkit2gtk-4.1-dev \
            libglib2.0-dev \
            build-essential \
            libayatana-appindicator3-dev \
            librsvg2-dev \
            libssl-dev

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy

      - name: Cache Rust
        uses: Swatinem/rust-cache@v2
        with:
          workspaces: src-tauri
          cache-on-failure: true

      - name: Setup pnpm
        uses: pnpm/action-setup@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      # Fastest checks first
      - name: Check Rust formatting
        working-directory: src-tauri
        run: cargo fmt -- --check

      - name: Check Frontend formatting
        run: pnpm run format:check

      - name: Run Clippy
        working-directory: src-tauri
        run: cargo clippy --all-targets --all-features -- -D warnings

  # Test only on Ubuntu (fastest, cheapest)
  test:
    name: Test
    runs-on: ubuntu-latest
    needs: lint
    steps:
      - uses: actions/checkout@v4

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            libwebkit2gtk-4.1-dev \
            libglib2.0-dev \
            build-essential \
            libayatana-appindicator3-dev \
            librsvg2-dev \
            libssl-dev

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Cache Rust
        uses: Swatinem/rust-cache@v2
        with:
          workspaces: src-tauri
          cache-on-failure: true

      - name: Setup pnpm
        uses: pnpm/action-setup@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'

      - name: Install frontend dependencies
        run: pnpm install --frozen-lockfile

      # Run tests in parallel
      - name: Run Rust tests
        working-directory: src-tauri
        run: cargo test --workspace --all-features

      - name: Run Frontend tests
        run: pnpm test

      - name: Generate coverage
        run: pnpm run test:coverage

      - name: Upload coverage
        uses: codecov/codecov-action@v4
        if: always()
        with:
          files: ./coverage/lcov.info
          flags: frontend
          fail_ci_if_error: false

  # Build check only on Ubuntu (unless release)
  build:
    name: Build Check
    runs-on: ubuntu-latest
    needs: test
    # Skip on PRs to save time, only run on push to main
    if: github.event_name == 'push'
    steps:
      - uses: actions/checkout@v4

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            libwebkit2gtk-4.1-dev \
            libglib2.0-dev \
            build-essential \
            libayatana-appindicator3-dev \
            librsvg2-dev \
            libssl-dev

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Cache Rust
        uses: Swatinem/rust-cache@v2
        with:
          workspaces: src-tauri
          cache-on-failure: true

      - name: Setup pnpm
        uses: pnpm/action-setup@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'

      - name: Install frontend dependencies
        run: pnpm install --frozen-lockfile

      - name: Build frontend
        run: pnpm run build

      - name: Build Tauri (debug mode for speed)
        working-directory: src-tauri
        run: cargo build --all-features

  # Security audit (low priority, can fail without blocking)
  security:
    name: Security Audit
    runs-on: ubuntu-latest
    # Run in parallel with tests
    needs: lint
    # Don't block CI on audit failures
    continue-on-error: true
    steps:
      - uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable

      # Cache cargo-audit binary
      - name: Cache cargo-audit
        uses: actions/cache@v4
        with:
          path: ~/.cargo/bin/cargo-audit
          key: ${{ runner.os }}-cargo-audit

      - name: Install cargo-audit
        run: cargo install cargo-audit --locked || true

      - name: Run Rust security audit
        working-directory: src-tauri
        run: cargo audit

      - name: Setup pnpm
        uses: pnpm/action-setup@v4

      - name: Run pnpm security audit
        run: pnpm audit --audit-level=moderate || true
