//! Built-in service detection patterns

use super::detector::{ServiceCategory, ServicePattern};

/// Get all built-in service detection patterns
pub fn get_builtin_patterns() -> Vec<ServicePattern> {
    vec![
        // Web Frameworks
        ServicePattern {
            name: "Next.js".to_string(),
            category: ServiceCategory::WebFramework,
            process_patterns: vec!["node".to_string(), "next".to_string()],
            port_hints: vec![3000, 3001],
            command_patterns: vec!["next dev".to_string(), "next start".to_string()],
            description: "React framework for production".to_string(),
            docs_url: Some("https://nextjs.org/docs".to_string()),
            health_check_path: Some("/".to_string()),
            icon: "nextdotjs".to_string(),
        },
        ServicePattern {
            name: "Vite".to_string(),
            category: ServiceCategory::Development,
            process_patterns: vec!["node".to_string(), "vite".to_string()],
            port_hints: vec![5173, 5174],
            command_patterns: vec!["vite".to_string(), "vite dev".to_string()],
            description: "Next generation frontend tooling".to_string(),
            docs_url: Some("https://vitejs.dev".to_string()),
            health_check_path: Some("/".to_string()),
            icon: "vite".to_string(),
        },
        ServicePattern {
            name: "React (CRA)".to_string(),
            category: ServiceCategory::WebFramework,
            process_patterns: vec!["node".to_string(), "react-scripts".to_string()],
            port_hints: vec![3000],
            command_patterns: vec!["react-scripts start".to_string()],
            description: "React development server".to_string(),
            docs_url: Some("https://react.dev".to_string()),
            health_check_path: Some("/".to_string()),
            icon: "createreactapp".to_string(),
        },
        ServicePattern {
            name: "Express".to_string(),
            category: ServiceCategory::WebFramework,
            process_patterns: vec!["node".to_string()],
            port_hints: vec![3000, 8080],
            command_patterns: vec!["express".to_string()],
            description: "Fast, unopinionated web framework for Node.js".to_string(),
            docs_url: Some("https://expressjs.com".to_string()),
            health_check_path: Some("/".to_string()),
            icon: "express".to_string(),
        },
        ServicePattern {
            name: "Rails".to_string(),
            category: ServiceCategory::WebFramework,
            process_patterns: vec!["ruby".to_string(), "rails".to_string(), "puma".to_string()],
            port_hints: vec![3000, 3001],
            command_patterns: vec!["rails server".to_string(), "rails s".to_string()],
            description: "Ruby web application framework".to_string(),
            docs_url: Some("https://rubyonrails.org".to_string()),
            health_check_path: Some("/".to_string()),
            icon: "rubyonrails".to_string(),
        },
        ServicePattern {
            name: "Django".to_string(),
            category: ServiceCategory::WebFramework,
            process_patterns: vec!["python".to_string(), "django".to_string()],
            port_hints: vec![8000, 8080],
            command_patterns: vec!["manage.py runserver".to_string(), "django".to_string()],
            description: "Python web framework".to_string(),
            docs_url: Some("https://www.djangoproject.com".to_string()),
            health_check_path: Some("/".to_string()),
            icon: "django".to_string(),
        },
        ServicePattern {
            name: "Flask".to_string(),
            category: ServiceCategory::WebFramework,
            process_patterns: vec!["python".to_string(), "flask".to_string()],
            port_hints: vec![5000, 8080],
            command_patterns: vec!["flask run".to_string()],
            description: "Lightweight Python web framework".to_string(),
            docs_url: Some("https://flask.palletsprojects.com".to_string()),
            health_check_path: Some("/".to_string()),
            icon: "flask".to_string(),
        },
        ServicePattern {
            name: "FastAPI".to_string(),
            category: ServiceCategory::WebFramework,
            process_patterns: vec!["python".to_string(), "uvicorn".to_string()],
            port_hints: vec![8000, 8080],
            command_patterns: vec!["uvicorn".to_string(), "fastapi".to_string()],
            description: "Modern, fast Python web framework".to_string(),
            docs_url: Some("https://fastapi.tiangolo.com".to_string()),
            health_check_path: Some("/docs".to_string()),
            icon: "fastapi".to_string(),
        },
        ServicePattern {
            name: "Spring Boot".to_string(),
            category: ServiceCategory::WebFramework,
            process_patterns: vec!["java".to_string()],
            port_hints: vec![8080, 8081, 9090],
            command_patterns: vec![
                "spring-boot".to_string(),
                "org.springframework.boot".to_string(),
            ],
            description: "Java-based enterprise framework".to_string(),
            docs_url: Some("https://spring.io/projects/spring-boot".to_string()),
            health_check_path: Some("/actuator/health".to_string()),
            icon: "springboot".to_string(),
        },
        // Databases
        ServicePattern {
            name: "PostgreSQL".to_string(),
            category: ServiceCategory::Database,
            process_patterns: vec!["postgres".to_string(), "postmaster".to_string()],
            port_hints: vec![5432],
            command_patterns: vec!["postgres".to_string()],
            description: "Advanced open source relational database".to_string(),
            docs_url: Some("https://www.postgresql.org/docs".to_string()),
            health_check_path: None,
            icon: "postgresql".to_string(),
        },
        ServicePattern {
            name: "MySQL".to_string(),
            category: ServiceCategory::Database,
            process_patterns: vec!["mysql".to_string(), "mysqld".to_string()],
            port_hints: vec![3306],
            command_patterns: vec!["mysql".to_string()],
            description: "Popular open source database".to_string(),
            docs_url: Some("https://dev.mysql.com/doc".to_string()),
            health_check_path: None,
            icon: "mysql".to_string(),
        },
        ServicePattern {
            name: "MongoDB".to_string(),
            category: ServiceCategory::Database,
            process_patterns: vec!["mongod".to_string(), "mongo".to_string()],
            port_hints: vec![27017, 27018],
            command_patterns: vec!["mongod".to_string()],
            description: "NoSQL document database".to_string(),
            docs_url: Some("https://www.mongodb.com/docs".to_string()),
            health_check_path: None,
            icon: "mongodb".to_string(),
        },
        ServicePattern {
            name: "Redis".to_string(),
            category: ServiceCategory::Cache,
            process_patterns: vec!["redis-server".to_string(), "redis".to_string()],
            port_hints: vec![6379],
            command_patterns: vec!["redis-server".to_string()],
            description: "In-memory data structure store".to_string(),
            docs_url: Some("https://redis.io/docs".to_string()),
            health_check_path: None,
            icon: "redis".to_string(),
        },
        // Proxies & Servers
        ServicePattern {
            name: "nginx".to_string(),
            category: ServiceCategory::Proxy,
            process_patterns: vec!["nginx".to_string()],
            port_hints: vec![80, 443, 8080],
            command_patterns: vec!["nginx".to_string()],
            description: "High-performance web server and reverse proxy".to_string(),
            docs_url: Some("https://nginx.org/en/docs".to_string()),
            health_check_path: Some("/".to_string()),
            icon: "nginx".to_string(),
        },
        ServicePattern {
            name: "Apache".to_string(),
            category: ServiceCategory::Proxy,
            process_patterns: vec!["httpd".to_string(), "apache2".to_string()],
            port_hints: vec![80, 443, 8080],
            command_patterns: vec!["httpd".to_string(), "apache2".to_string()],
            description: "The Apache HTTP Server".to_string(),
            docs_url: Some("https://httpd.apache.org/docs".to_string()),
            health_check_path: Some("/".to_string()),
            icon: "apache".to_string(),
        },
        // Message Queues
        ServicePattern {
            name: "RabbitMQ".to_string(),
            category: ServiceCategory::MessageQueue,
            process_patterns: vec!["rabbitmq".to_string(), "beam.smp".to_string()],
            port_hints: vec![5672, 15672],
            command_patterns: vec!["rabbitmq-server".to_string()],
            description: "Message broker software".to_string(),
            docs_url: Some("https://www.rabbitmq.com/docs".to_string()),
            health_check_path: Some("/api/health/checks/alarms".to_string()),
            icon: "rabbitmq".to_string(),
        },
        ServicePattern {
            name: "Kafka".to_string(),
            category: ServiceCategory::MessageQueue,
            process_patterns: vec!["kafka".to_string(), "java".to_string()],
            port_hints: vec![9092, 9093],
            command_patterns: vec!["kafka".to_string()],
            description: "Distributed event streaming platform".to_string(),
            docs_url: Some("https://kafka.apache.org/documentation".to_string()),
            health_check_path: None,
            icon: "apachekafka".to_string(),
        },
        // Development Tools
        ServicePattern {
            name: "Webpack Dev Server".to_string(),
            category: ServiceCategory::Development,
            process_patterns: vec!["node".to_string(), "webpack-dev-server".to_string()],
            port_hints: vec![8080, 8081],
            command_patterns: vec![
                "webpack-dev-server".to_string(),
                "webpack serve".to_string(),
            ],
            description: "Webpack development server".to_string(),
            docs_url: Some("https://webpack.js.org/configuration/dev-server".to_string()),
            health_check_path: Some("/".to_string()),
            icon: "webpack".to_string(),
        },
        ServicePattern {
            name: "Storybook".to_string(),
            category: ServiceCategory::Development,
            process_patterns: vec!["node".to_string(), "storybook".to_string()],
            port_hints: vec![6006],
            command_patterns: vec!["storybook dev".to_string(), "start-storybook".to_string()],
            description: "UI component development tool".to_string(),
            docs_url: Some("https://storybook.js.org/docs".to_string()),
            health_check_path: Some("/".to_string()),
            icon: "storybook".to_string(),
        },
        ServicePattern {
            name: "Docker".to_string(),
            category: ServiceCategory::Development,
            process_patterns: vec!["dockerd".to_string(), "docker".to_string()],
            port_hints: vec![2375, 2376],
            command_patterns: vec!["dockerd".to_string()],
            description: "Container platform".to_string(),
            docs_url: Some("https://docs.docker.com".to_string()),
            health_check_path: None,
            icon: "docker".to_string(),
        },
        // Additional Services
        ServicePattern {
            name: "Elasticsearch".to_string(),
            category: ServiceCategory::Database,
            process_patterns: vec!["elasticsearch".to_string(), "java".to_string()],
            port_hints: vec![9200, 9300],
            command_patterns: vec!["elasticsearch".to_string()],
            description: "Distributed search and analytics engine".to_string(),
            docs_url: Some("https://www.elastic.co/guide".to_string()),
            health_check_path: Some("/_cluster/health".to_string()),
            icon: "elasticsearch".to_string(),
        },
        ServicePattern {
            name: "Memcached".to_string(),
            category: ServiceCategory::Cache,
            process_patterns: vec!["memcached".to_string()],
            port_hints: vec![11211],
            command_patterns: vec!["memcached".to_string()],
            description: "Distributed memory caching system".to_string(),
            docs_url: Some("https://memcached.org".to_string()),
            health_check_path: None,
            icon: "redis".to_string(), // simple-icons doesn't have memcached, use redis as placeholder
        },
        // Generic fallback (keep at end so specific patterns match first)
        ServicePattern {
            name: "Node.js".to_string(),
            category: ServiceCategory::Development,
            process_patterns: vec!["node".to_string()],
            port_hints: vec![],
            command_patterns: vec![],
            description: "JavaScript runtime built on Chrome's V8 engine".to_string(),
            docs_url: Some("https://nodejs.org/docs".to_string()),
            health_check_path: None,
            icon: "nodedotjs".to_string(),
        },
    ]
}
